<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Builder.Integration.AspNet.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> to add a Bot to the ASP.NET Core request execution pipeline.
            </summary>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.BotFrameworkPaths"/>
            <seealso cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions.UseBotFramework(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Maps various endpoint handlers for the <see cref="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">registered bot</see> into the request execution pipeline.
            </summary>
            <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions.UseNamedPipes(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
            Enables named pipes for this application.
            </summary>
            <param name="applicationBuilder">The application builder that defines the bot's pipeline.<see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>.</param>
            <param name="pipeName">The name of the named pipe to use when creating the server.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter">
            <summary>
            A Bot Builder Adapter implementation used to handled bot Framework HTTP requests.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter.#ctor(Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Rest.TransientFaultHandling.RetryPolicy,System.Net.Http.HttpClient,Microsoft.Bot.Builder.IMiddleware,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter"/> class,
            using a credential provider.
            </summary>
            <param name="credentialProvider">The credential provider.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="channelProvider">The channel provider.</param>
            <param name="connectorClientRetryPolicy">Retry policy for retrying HTTP operations.</param>
            <param name="customHttpClient">The HTTP client.</param>
            <param name="middleware">The middleware to initially add to the adapter.</param>
            <param name="logger">The ILogger implementation this adapter should use.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentialProvider"/> is <c>null</c>.</exception>
            <remarks>Use a <see cref="T:Microsoft.Bot.Builder.MiddlewareSet"/> object to add multiple middleware
            components in the constructor. Use the IMiddleware method to
            add additional middleware to the adapter after construction.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter.ConnectWebSocketAsync(Microsoft.Bot.Builder.IBot,Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Process the initial request to establish a long lived connection via a streaming server.
            </summary>
            <param name="bot">The <see cref="T:Microsoft.Bot.Builder.IBot"/> instance.</param>
            <param name="httpRequest">The connection request.</param>
            <param name="httpResponse">The response sent on error or connection termination.</param>
            <returns>Returns on task completion.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient.PostActivityAsync``1(System.String,System.String,System.Uri,System.Uri,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Forwards an activity to a skill (bot).
            </summary>
            <remarks>NOTE: Forwarding an activity to a skill will flush UserState and ConversationState changes so that skill has accurate state.</remarks>
            <typeparam name="T">The type of body in the InvokeResponse.</typeparam>
            <param name="fromBotId">The MicrosoftAppId of the bot sending the activity.</param>
            <param name="toBotId">The MicrosoftAppId of the bot receiving the activity.</param>
            <param name="toUrl">The URL of the bot receiving the activity.</param>
            <param name="serviceUrl">The callback Url for the skill host.</param>
            <param name="conversationId">A conversation ID to use for the conversation with the skill.</param>
            <param name="activity">activity to forward.</param>
            <param name="cancellationToken">cancellation Token.</param>
            <returns>Async task with optional invokeResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient.BuildCredentialsAsync(System.String,System.String)">
            <summary>
            Logic to build an <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> object to be used to acquire tokens
            for this HttpClient.
            </summary>
            <param name="appId">The application id.</param>
            <param name="oAuthScope">The optional OAuth scope.</param>
            <returns>The app credentials to be used to acquire tokens.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient.GetAppCredentialsAsync(System.String,System.String)">
            <summary>
            Gets the application credentials. App Credentials are cached so as to ensure we are not refreshing
            token every time.
            </summary>
            <param name="appId">The application identifier (AAD Id for the bot).</param>
            <param name="oAuthScope">The scope for the token, skills will use the Skill App Id. </param>
            <returns>App credentials.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController">
            <summary>
            A base class for a skill controller.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.#ctor(Microsoft.Bot.Builder.ChannelServiceHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController"/> class.
            </summary>
            <param name="handler">A <see cref="T:Microsoft.Bot.Builder.ChannelServiceHandler"/> that will handle the incoming request.</param>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.SendToConversationAsync(System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            SendToConversation.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="activity">Activity to send.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.ReplyToActivityAsync(System.String,System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            ReplyToActivity.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="activityId">activityId the reply is to (OPTIONAL).</param>
            <param name="activity">Activity to send.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.UpdateActivityAsync(System.String,System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            UpdateActivity.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="activityId">activityId to update.</param>
            <param name="activity">replacement Activity.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.DeleteActivityAsync(System.String,System.String)">
            <summary>
            DeleteActivity.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="activityId">activityId to delete.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.GetActivityMembersAsync(System.String,System.String)">
            <summary>
            GetActivityMembers.
            </summary>
            <remarks>
            Markdown=Content\Methods\GetActivityMembers.md.
            </remarks>
            <param name="conversationId">Conversation ID.</param>
            <param name="activityId">Activity ID.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.CreateConversationAsync(Microsoft.Bot.Schema.ConversationParameters)">
            <summary>
            CreateConversation.
            </summary>
            <param name="parameters">Parameters to create the conversation from.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.GetConversationsAsync(System.String)">
            <summary>
            GetConversations.
            </summary>
            <param name="continuationToken">skip or continuation token.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.GetConversationMembersAsync(System.String)">
            <summary>
            GetConversationMembers.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.GetConversationPagedMembersAsync(System.String,System.Int32,System.String)">
            <summary>
            GetConversationPagedMembers.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="pageSize">Suggested page size.</param>
            <param name="continuationToken">Continuation Token.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.DeleteConversationMemberAsync(System.String,System.String)">
            <summary>
            DeleteConversationMember.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="memberId">ID of the member to delete from this conversation.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.SendConversationHistoryAsync(System.String,Microsoft.Bot.Schema.Transcript)">
            <summary>
            SendConversationHistory.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="history">Historic activities.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController.UploadAttachmentAsync(System.String,Microsoft.Bot.Schema.AttachmentData)">
            <summary>
            UploadAttachment.
            </summary>
            <param name="conversationId">Conversation ID.</param>
            <param name="attachmentUpload">Attachment data.</param>
            <returns>TODO Document.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.IBotFrameworkHttpAdapter">
            <summary>
            Interface to express the relationship between an mvc api Controller and a Bot Builder Adapter.
            This interface can be used for Dependency Injection.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.IBotFrameworkHttpAdapter.ProcessAsync(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.Http.HttpResponse,Microsoft.Bot.Builder.IBot,System.Threading.CancellationToken)">
            <summary>
            This method can be called from inside a POST method on any Controller implementation.
            </summary>
            <param name="httpRequest">The HTTP request object, typically in a POST handler by a Controller.</param>
            <param name="httpResponse">The HTTP response object.</param>
            <param name="bot">The bot implementation.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions">
            <summary>
            A set of extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> which provide support for hosting bots with .NET Core.
            </summary>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions"/>
            <seealso cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration"/>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">
            <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot"/> that is to be registered and exposed to the Bot Framework.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <remarks>
                The <typeparamref name="TBot"/> will be registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient">transient</see> and be instantiated on each turn.
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">
            <summary>
            Adds and optionally configures a singleton <paramref name="bot">bot</paramref> instance to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot"/> that is to be registered and exposed to the Bot Framework.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="bot">The instance of the bot that will be registered as a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">
            <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot"/> that is to be registered and exposed to the Bot Framework.</typeparam>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="botFactory">A factory method that will supply an instance of the <typeparamref name="TBot"/> when invoked.</param>
            <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <remarks>
                The <paramref name="botFactory">factory</paramref> will be registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient">transient</see>
                and be invoked on each turn.
            </remarks>
            <seealso cref="T:Microsoft.Bot.Builder.IBot"/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">
             <summary>
             Adds the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> as the <see cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration"/> which will be used by the integration layer
             for processing bot requests.
             </summary>
             <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
             <param name="configureAction">A optional callback that, if provided, will be invoked to further configure the integration.</param>
             <returns>A reference to this instance after the operation has completed.</returns>
             <remarks>
                 The <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/> will be registered as a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton">singleton</see>.
            
                 NOTE: Calling any of the <c>AddBot</c> overloads those will attempt to implicitly register this for you if there is no
                 explicit <see cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration"/> already registered in the <paramref name="services"/> collection.
             </remarks>
             <seealso cref="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})"/>
             <seealso cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter"/>
             <seealso cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration"/>
        </member>
        <member name="T:Microsoft.Bot.Builder.Integration.AspNet.Core.Skills.SkillHttpClient">
            <summary>
            A <see cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient"/>specialized for Skills that encapsulates Conversation ID generation.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFramework.ConfigurationChannelProvider">
             <summary>
             Channel provider which uses <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> to lookup the channel service property.
             </summary>
             <remarks>
             This will populate the <see cref="P:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.ChannelService"/> from a configuration entry with the key of <see cref="F:Microsoft.Bot.Builder.BotFramework.ConfigurationChannelProvider.ChannelServiceKey"/>.
            
             NOTE: if the keys are not present, a <c>null</c> value will be used.
             </remarks>
        </member>
        <member name="F:Microsoft.Bot.Builder.BotFramework.ConfigurationChannelProvider.ChannelServiceKey">
            <summary>
            The key for ChannelService.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Builder.BotFramework.ConfigurationCredentialProvider">
             <summary>
             Credential provider which uses <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> to lookup appId and password.
             </summary>
             <remarks>
             This will populate the <see cref="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.AppId"/> from an configuration entry with the key of <see cref="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppIdKey"/>
             and the <see cref="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.Password"/> from a configuration entry with the key of <see cref="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppPasswordKey"/>.
            
             NOTE: if the keys are not present, a <c>null</c> value will be used.
             </remarks>
        </member>
    </members>
</doc>
