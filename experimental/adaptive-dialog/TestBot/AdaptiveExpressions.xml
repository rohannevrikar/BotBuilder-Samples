<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdaptiveExpressions</name>
    </assembly>
    <members>
        <member name="T:AdaptiveExpressions.CommonRegex">
            <summary>
            Convert PCRE regex string to <see cref="T:System.Text.RegularExpressions.Regex"/> object.
            PCRE ref: http://www.pcre.org/.
            PCRE antlr g4 file: CommonRegex.g4.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegex.CreateRegex(System.String)">
            <summary>
            Create <see cref="T:System.Text.RegularExpressions.Regex"/> object from PCRE pattern string.
            </summary>
            <param name="pattern">PCRE pattern string.</param>
            <returns>Regex object.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Constant">
            <summary>
            Constant expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Constant.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Constant"/> class.
            Construct an expression constant.
            </summary>
            <param name="value">Constant value.</param>
        </member>
        <member name="P:AdaptiveExpressions.Constant.Value">
            <summary>
            Gets or sets constant value.
            </summary>
            <value>
            Constant value.
            </value>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ArrayExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The type of the items of the array.</typeparam>
        </member>
        <member name="T:AdaptiveExpressions.Converters.BoolExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Converters.EnumExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The enum type to construct.</typeparam>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ExpressionPropertyConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="T:AdaptiveExpressions.Converters.IntExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Converters.NumberExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ObjectExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="T:AdaptiveExpressions.Converters.StringExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Converters.ValueExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.ReturnType">
            <summary>
            Type expected from evaluating an expression.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Boolean">
            <summary>
            True or false boolean value.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Number">
            <summary>
            Numerical value like int, float, double, ...
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.Object">
            <summary>
            Any value is possible.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ReturnType.String">
            <summary>
            String value.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.Expression">
            <summary>
            An expression which can be analyzed or evaluated to produce a value.
            </summary>
            <remarks>
            This provides an open-ended wrapper that supports a number of built-in functions and can also be extended at runtime.
            It also supports validation of the correctness of an expression and evaluation that should be exception free.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Expression.#ctor(System.String,AdaptiveExpressions.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Expression"/> class.
            Built-in expression constructor.
            </summary>
            <param name="type">Type of built-in expression from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <param name="children">Child expressions.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.#ctor(AdaptiveExpressions.ExpressionEvaluator,AdaptiveExpressions.Expression[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Expression"/> class.
            Expression constructor.
            </summary>
            <param name="evaluator">Information about how to validate and evaluate expression.</param>
            <param name="children">Child expressions.</param>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Type">
            <summary>
            Gets type of expression.
            </summary>
            <value>
            Type of expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Evaluator">
            <summary>
            Gets expression evaluator.
            </summary>
            <value>
            expression evaluator.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.Children">
            <summary>
            Gets or sets children expressions.
            </summary>
            <value>
            Children expressions.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Expression.ReturnType">
            <summary>
            Gets expected result of evaluating expression.
            </summary>
            <value>
            Expected result of evaluating expression.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.Expression.op_Implicit(System.String)~AdaptiveExpressions.Expression">
            <summary>
            allow a string to be implicitly assigned to an expression property.
            </summary>
            <param name="expression">string expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Parse(System.String)">
            <summary>
            Parse an string into an expression object.
            </summary>
            <param name="expression">expression string.</param>
            <returns>resulting expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.MakeExpression(System.String,AdaptiveExpressions.Expression[])">
            <summary>
            Make an expression and validate it.
            </summary>
            <param name="type">Type of expression from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <param name="children">Child expressions.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.MakeExpression(AdaptiveExpressions.ExpressionEvaluator,AdaptiveExpressions.Expression[])">
            <summary>
            Make an expression and validate it.
            </summary>
            <param name="evaluator">Information about how to validate and evaluate expression.</param>
            <param name="children">Child expressions.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.LambaExpression(AdaptiveExpressions.EvaluateExpressionDelegate)">
            <summary>
            Construct an expression from a <see cref="T:AdaptiveExpressions.EvaluateExpressionDelegate"/>.
            </summary>
            <param name="function">Function to create an expression from.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Lambda(System.Func{System.Object,System.Object})">
            <summary>
            Construct an expression from a lambda expression over the state.
            </summary>
            <remarks>Exceptions will be caught and surfaced as an error string.</remarks>
            <param name="function">Lambda expression to evaluate.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.SetPathToValue(AdaptiveExpressions.Expression,AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate an Set a property expression to a value expression.
            </summary>
            <param name="property">property expression.</param>
            <param name="value">value expression.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.SetPathToValue(AdaptiveExpressions.Expression,System.Object)">
            <summary>
            Construct and validate an Set a property expression to a value expression.
            </summary>
            <param name="property">property expression.</param>
            <param name="value">value object.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.EqualsExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an Equals expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.AndExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an And expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.OrExpression(AdaptiveExpressions.Expression[])">
            <summary>
            Construct and validate an Or expression.
            </summary>
            <param name="children">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.NotExpression(AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate a Not expression.
            </summary>
            <param name="child">Child clauses.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ConstantExpression(System.Object)">
            <summary>
            Construct a constant expression.
            </summary>
            <param name="value">Constant value.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Accessor(System.String,AdaptiveExpressions.Expression)">
            <summary>
            Construct and validate a property accessor.
            </summary>
            <param name="property">Property to lookup.</param>
            <param name="instance">Expression to get instance that contains property or null for global state.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.Validate">
            <summary>
            Validate immediate expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Expression.ValidateTree">
            <summary>
            Recursively validate the expression tree.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate(System.Object)">
            <summary>
            Evaluate the expression.
            </summary>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate(AdaptiveExpressions.Memory.IMemory)">
            <summary>
            Evaluate the expression.
            </summary>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate``1(System.Object)">
            <summary>
            Evaluate the expression.
            </summary>
            <typeparam name="T">type of result of the expression.</typeparam>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Expression.TryEvaluate``1(AdaptiveExpressions.Memory.IMemory)">
            <summary>
            Evaluate the expression.
            </summary>
            <typeparam name="T">type of result of the expression.</typeparam>
            <param name="state">
            Global state to evaluate accessor expressions against.  Can be <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Collections.IDictionary"/> otherwise reflection is used to access property and then indexer.
            </param>
            <returns>Computed value and an error string.  If the string is non-null, then there was an evaluation error.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ValidateExpressionDelegate">
            <summary>
            Delegate for doing static validation on an expression.
            </summary>
            <remarks>
            Validators can and should throw exceptions if the expression is not valid.
            </remarks>
            <param name="expression">Expression to check.</param>
        </member>
        <member name="T:AdaptiveExpressions.EvaluateExpressionDelegate">
            <summary>
            Delegate to evaluate an expression.
            </summary>
            <remarks>
            Evaluators should verify runtime arguments when appropriate and return an error rather than throw exceptions if possible.
            </remarks>
            <param name="expression">Expression to evaluate.</param>
            <param name="state">Global state information.</param>
            <returns>Value and error string that is non-null if there is an error.</returns>
        </member>
        <member name="T:AdaptiveExpressions.EvaluatorLookup">
            <summary>
            Delegate to lookup function information from the type.
            </summary>
            <param name="type">Name to lookup, usually from <see cref="T:AdaptiveExpressions.ExpressionType"/>.</param>
            <returns>Expression evaluation information.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionEvaluator">
            <summary>
            Information on how to evaluate an expression.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.#ctor(System.String,AdaptiveExpressions.EvaluateExpressionDelegate,AdaptiveExpressions.ReturnType,AdaptiveExpressions.ValidateExpressionDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.ExpressionEvaluator"/> class.
            </summary>
            <param name="type">Expression type.</param>
            <param name="evaluator">Delegate to evaluate an expression.</param>
            <param name="returnType">Type expected from evaluation.</param>
            <param name="validator">Static validation of expression.</param>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.Type">
            <summary>
            Gets the expression type for evaluator.
            </summary>
            <value>
            The type of expression from <see cref="T:AdaptiveExpressions.ExpressionType"/> for built-in functions or else a unique string for custom functions.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.ReturnType">
            <summary>
            Gets or sets the expression return type.
            </summary>
            <value>
            Type expected by evaluating the expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEvaluator.Negation">
            <summary>
            Gets or sets the evaluator that is a negation of this one.
            </summary>
            <remarks>
            When doing <see cref="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)"/> then negations will replace an expression and remove not parent.
            By default no negation is defined and not parent will remain.
            If a negation is defined then this is automatically set as its negation.
            If an evaluator is its own negation, then the negation will be passed through to children.
            </remarks>
            <value>
            The evaluator that is a negation of this one.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.TryEvaluate(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory)">
            <summary>
            Evaluate an expression.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="state">Global state information.</param>
            <returns>Value and error string that is non-null if there is an error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEvaluator.ValidateExpression(AdaptiveExpressions.Expression)">
            <summary>
            Validate an expression.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionFunctions">
             <summary>
             Definition of default built-in functions for expressions.
             </summary>
             <remarks>
             These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
             with a few extensions like infix operators for math, logic and comparisons.
            
             This class also has some methods that are useful to use when defining custom functions.
             You can always construct a <see cref="T:AdaptiveExpressions.ExpressionEvaluator"/> directly which gives the maximum amount of control over validation and evaluation.
             Validators are static checkers that should throw an exception if something is not valid statically.
             Evaluators are called to evaluate an expression and should try not to throw.
             There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
             </remarks>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionFunctions.Randomizer">
            <summary>
            Random number generator used for expressions.
            </summary>
            <remarks>This is exposed so that you can explicitly seed the random number generator for tests.</remarks>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionFunctions.DefaultDateTimeFormat">
            <summary>
            The default date time format string.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionFunctions.Functions">
            <summary>
            Dictionary of function => ExpressionEvaluator.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionFunctions._randomizerLock">
            <summary>
            Object used to lock Randomizer.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionFunctions.VerifyExpression">
            <summary>
            Verify the result of an expression is of the appropriate type and return a string if not.
            </summary>
            <param name="value">Value to verify.</param>
            <param name="expression">Expression that produced value.</param>
            <param name="child">Index of child expression.</param>
            <returns>Null if value if correct or error string otherwise.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateArityAndAnyType(AdaptiveExpressions.Expression,System.Int32,System.Int32,AdaptiveExpressions.ReturnType[])">
            <summary>
            Validate that expression has a certain number of children that are of any of the supported types.
            </summary>
            <remarks>
            If a child has a return type of Object then validation will happen at runtime.</remarks>
            <param name="expression">Expression to validate.</param>
            <param name="minArity">Minimum number of children.</param>
            <param name="maxArity">Maximum number of children.</param>
            <param name="types">Allowed return types for children.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateOrder(AdaptiveExpressions.Expression,AdaptiveExpressions.ReturnType[],AdaptiveExpressions.ReturnType[])">
            <summary>
            Validate the number and type of arguments to a function.
            </summary>
            <param name="expression">Expression to validate.</param>
            <param name="optional">Optional types in order.</param>
            <param name="types">Expected types in order.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateAtLeastOne(AdaptiveExpressions.Expression)">
            <summary>
            Validate at least 1 argument of any type.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or more numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateString(AdaptiveExpressions.Expression)">
            <summary>
            Validate 1 or more string arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinary(AdaptiveExpressions.Expression)">
            <summary>
            Validate there are two children.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumber(AdaptiveExpressions.Expression)">
            <summary>
            Validate 2 numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateTwoOrMoreThanTwoNumbers(AdaptiveExpressions.Expression)">
            <summary>
            Validate 2 or more than 2 numeric arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumberOrString(AdaptiveExpressions.Expression)">
            <summary>
            Validate there are 2 numeric or string arguments.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnary(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnaryString(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single string argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnaryBoolean(AdaptiveExpressions.Expression)">
            <summary>
            Validate there is a single boolean argument.
            </summary>
            <param name="expression">Expression to validate.</param>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is numeric.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumericList(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is numeric list.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumericListOrNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a numeric list or a numeric value.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyContainer(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value contains elements.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyList(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value contains elements.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.TryParseList(System.Object,System.Collections.IList@)">
            <summary>
            Try to coerce object to IList.
            </summary>
            <param name="value">Value to coerce.</param>
            <param name="list">IList if found.</param>
            <returns>true if found IList.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyInteger(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is an integer.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyString(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify an object is neither a string nor null.
            </summary>
            <param name="value">instance.</param>
            <param name="expression">expression.</param>
            <param name="number">number.</param>
            <returns>error message.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNotNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is not null.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrString(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a number or string.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)">
            <summary>
            Verify value is a number or string or null.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <param name="number">No function.</param>
            <returns>Error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.VerifyBoolean(System.Object,AdaptiveExpressions.Expression)">
            <summary>
            Verify value is boolean.
            </summary>
            <param name="value">Value to check.</param>
            <param name="expression">Expression that led to value.</param>
            <returns>Error or null if valid.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.EvaluateChildren(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Evaluate expression children and return them.
            </summary>
            <param name="expression">Expression with children.</param>
            <param name="state">Global state.</param>
            <param name="verify">Optional function to verify each child's result.</param>
            <returns>List of child values or error message.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.Apply(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ApplyWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ApplySequence(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ApplySequenceWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to check each arg for validity.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.Numeric(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Numeric operators that can have 1 or more args.
            </summary>
            <param name="type">Expression type.</param>
            <param name="function">Function to apply.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.NumericOrCollection(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Numeric or Collection operators that can have 1 or more args. It can be apply numeric values or a collection of numeric
            values, or a mixing of  numeric values and a collection.
            </summary>
            <param name="type">Expression type.</param>
            <param name="function">Function to apply.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.MultivariateNumeric(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Numeric operators that can have 2 or more args.
            </summary>
            <param name="type">Expression type.</param>
            <param name="function">Function to apply.</param>
            <param name="verify">Function to verify arguments.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.Comparison(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Boolean},AdaptiveExpressions.ValidateExpressionDelegate,AdaptiveExpressions.ExpressionFunctions.VerifyExpression)">
            <summary>
            Comparison operators.
            </summary>
            <remarks>
            A comparison operator returns false if the comparison is false, or there is an error.  This prevents errors from short-circuiting boolean expressions.
            </remarks>
            <param name="type">Expression type.</param>
            <param name="function">Function to apply.</param>
            <param name="validator">Function to validate expression.</param>
            <param name="verify">Function to verify arguments to expression.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.StringTransform(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})">
            <summary>
            Transform a string into another string.
            </summary>
            <param name="type">Expression type.</param>
            <param name="function">Function to apply.</param>
            <returns>Delegate for evaluating an expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.TimeTransform(System.String,System.Func{System.DateTime,System.Int32,System.DateTime})">
            <summary>
            Transform a date-time to another date-time.
            </summary>
            <param name="type">Expression type.</param>
            <param name="function">Transformer.</param>
            <returns>Delegate for evaluating expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.Lookup(System.String)">
            <summary>
            Lookup a built-in function information by type.
            </summary>
            <param name="type">Type to look up.</param>
            <returns>Information about expression type.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.AccessIndex(System.Object,System.Int32)">
            <summary>
            Lookup an index property of instance.
            </summary>
            <param name="instance">Instance with property.</param>
            <param name="index">Property to lookup.</param>
            <returns>Value and error information if any.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.TryAccessProperty(System.Object,System.String,System.Object@)">
            <summary>
            Lookup a property in IDictionary, JObject or through reflection.
            </summary>
            <param name="instance">Instance with property.</param>
            <param name="property">Property to lookup.</param>
            <param name="value">Value of property.</param>
            <returns>True if property is present and binds value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the property into a given instance.
            </summary>
            <param name="instance">Given instance.</param>
            <param name="property">Property be set.</param>
            <param name="value">Value be set.</param>
            <returns>Value and error information if any.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ResolveValue(System.Object)">
            <summary>
            Convert constant JValue to base type value.
            </summary>
            <param name="obj">input object.</param>
            <returns>Corresponding base type if input is a JValue.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.TryAccumulatePath(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory)">
            <summary>
            Try to accumulate the path from an Accessor or Element, from right to left.
            </summary>
            <param name="expression">expression.</param>
            <param name="state">scope.</param>
            <returns>return the accumulated path and the expression left unable to accumulate.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.ResolveListValue(System.Object)">
            <summary>
            Return new object list replace jarray.ToArray&lt;object&gt;().
            </summary>
            <param name="instance">List to resolve.</param>
            <returns>Resolved list.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.IsLogicTrue(System.Object)">
            <summary>
            Test result to see if True in logical comparison functions.
            </summary>
            <param name="instance">Computed value.</param>
            <returns>True if boolean true or non-null.</returns>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionFunctions.GetPropertyCount(System.Object)">
            <summary>
            Get the property count of an object.
            </summary>
            <param name="obj">input object.</param>
            <returns>property count.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ArrayExpression`1">
            <summary>
            ArrayExpression - represents a property which is either a value of array of T or a string expression to bind to a array of T.
            </summary>
            <typeparam name="T">type of object in the array.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="value">collection of (T).</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expression">expression which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expression">expression which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to array.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ArrayExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">JToken which is either a collection of (T) or expression which evaluates to array.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.BoolExpression">
            <summary>
            BoolExpression - represents a property which is either a boolean or a string expression which resolves to a boolean.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="value">bool value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to bool.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.BoolExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expressionOrValue">expression or value to resolve to bool.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.EnumExpression`1">
            <summary>
            EnumExpression - represents a property which is either a enum(T) or a string expression which resolves to a enum(T).
            </summary>
            <typeparam name="T">type of enum.</typeparam>
            <remarks>String values are always interpreted as an enum, unless it has '=' prefix in which case it is evaluated as a expression.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="value">value of T.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expression">expression to resolve to an enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expression">expression to resolve to an enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to enum.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.EnumExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">jtoken value to resolve to an enum.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ExpressionProperty`1">
            <summary>
            Base class which defines a Expression or value for a property.
            </summary>
            <typeparam name="T">type of object the expression should evaluate to.</typeparam>
        </member>
        <member name="P:AdaptiveExpressions.Properties.ExpressionProperty`1.Value">
            <summary>
            Gets or sets the raw value of the expression property.
            </summary>
            <value>
            the value to return when someone calls GetValue().
            </value>
        </member>
        <member name="P:AdaptiveExpressions.Properties.ExpressionProperty`1.ExpressionText">
            <summary>
            Gets or sets the expression text to evaluate to get the value.
            </summary>
            <value>
            The expression text.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ToExpression">
            <summary>
            This will return the existing expression or ConstantExpression(Value) if the value is non-complex type.
            </summary>
            <returns>expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetValue(System.Object)">
            <summary>
            Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>value or default(T) if not found.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetValue(System.Object)">
            <summary>
            try to Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>value.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetValue(System.Object)">
            <summary>
            Set the value.
            </summary>
            <param name="value">value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.GetObject(System.Object)">
            <summary>
            Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data to bind to.</param>
            <returns>value as object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.TryGetObject(System.Object)">
            <summary>
            Try Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data.</param>
            <returns>Value and error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.SetObject(System.Object)">
            <summary>
            Set value as object.
            </summary>
            <param name="value">object.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ExpressionProperty`1.ConvertObject(System.Object)">
            <summary>
            Convert raw object to desired value type.
            </summary>
            <remarks>
            This method is called whenever an object is fected via expression or is deserialized from raw text.
            </remarks>
            <param name="result">result to convert to object of type T.</param>
            <returns>object of type T.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Properties.IExpressionProperty">
            <summary>
            Interface which defines plain object access to the values of an ExpressionProperty.
            </summary>
            <remarks>    
            This interface definition allows reflection to work with ExpressionProperty{T} without having to know the generic parameter type.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.GetObject(System.Object)">
            <summary>
            Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data to bind to.</param>
            <returns>value as object.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.TryGetObject(System.Object)">
            <summary>
            Try Get value as object.
            </summary>
            <remarks>Helper methods which allows you to work with the expression property values as purely objects.</remarks>
            <param name="data">data.</param>
            <returns>Value and error.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IExpressionProperty.SetObject(System.Object)">
            <summary>
            Set value as object.
            </summary>
            <param name="value">object.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.IntExpression">
            <summary>
            IntExpression - represents a property which is either an Integer or a string expression which resolves to a Integer.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="value">value to return.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expression">string expression to resolve to an int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to an int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to int.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.IntExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expressionOrValue">JToken to resolve to an int.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.NumberExpression">
            <summary>
            NumberExpression - represents a property which is either a float or a string expression which resolves to a float.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="value">value to use.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expression">string to interpret as expression or number.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expression">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="lambda">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.NumberExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expressionOrValue">jtoken to interpret as expression or number.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ObjectExpression`1">
            <summary>
            ObjectExpression(T) - represents a property which is either an object of type T or a string expression which resolves to a object of type T.
            </summary>
            <typeparam name="T">the type of object.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="value">value.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expressionOrString">expression or string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expression">expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to object.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ObjectExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ObjectExpression`1"/> class.
            </summary>
            <param name="expressionOrValue">expression or value.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.StringExpression">
            <summary>
            StringExpression - represents a property which is either a string value or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = "Hello ${user.name}" => "Hello Joe"
                prop = "=length(user.name)" => "3"
                prop = "=user.name" => "Joe"
                prop = "\=user" => "=user".
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expressionOrValue">string to interpret as string or expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expressionOrValue">value to interpret as a string or expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(AdaptiveExpressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="expression">expression to a string.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.StringExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.StringExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to string.</param>
        </member>
        <member name="T:AdaptiveExpressions.Properties.ValueExpression">
            <summary>
            ValueExpression - represents a property which is an object of any kind or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * any other type, then it is of that type (int, bool, object, etc.)
            You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = true ==> true
                prop = "Hello ${user.name}" => "Hello Joe"
                prop = "=length(user.name)" => 3
                prop = "=user.age" => 45.
                prop = "\=user.age" => "=user.age".
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
            <param name="value">value to interpret as object or string expression.</param>
        </member>
        <member name="M:AdaptiveExpressions.Properties.ValueExpression.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Properties.ValueExpression"/> class.
            </summary>
            <param name="lambda">function (data) which evaluates to value.</param>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionType">
            <summary>
            Built-in expression types.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionType.Optional">
            <summary>
            Mark a sub-expression as optional.
            </summary>
            <remarks>
            When an expression is being processed, optional creates a disjunction where the expression is both included and not
            included with the rest of the expression.  This is a simple way to express this common relationship.  By generating
            both clauses then matching the expression can be more specific when the optional expression is true.
            </remarks>
        </member>
        <member name="F:AdaptiveExpressions.ExpressionType.Ignore">
            <summary>
            Any predicate expression wrapped in this will be ignored for specialization.
            </summary>
            <remarks>
            This is useful for when you need to add expression to the trigger that are part of rule mechanics rather than of intent.
            For example, if you have a counter for how often a particular message is displayed, then that is part of the triggering condition, 
            but all such rules would be incomparable because they counter is per-rule. 
            </remarks>
        </member>
        <member name="T:AdaptiveExpressions.Extensions">
            <summary>
            Extension methods for detecting or value testing of various types.
            </summary>
            <summary>
            Extension methods for manipulation of <see cref="T:AdaptiveExpressions.Expression"/> values.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.IsNumber(System.Object)">
            <summary>
            Test an object to see if it is a numeric type.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if numeric type.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.IsInteger(System.Object)">
            <summary>
            Test an object to see if it is an integer type.
            </summary>
            <param name="value">Value to check.</param>
            <returns>True if numeric type.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.DeepEquals(AdaptiveExpressions.Expression,AdaptiveExpressions.Expression)">
            <summary>
            Do a deep equality between expressions.
            </summary>
            <param name="expr">Base expression.</param>
            <param name="other">Other expression.</param>
            <returns>True if expressions are the same.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.References(AdaptiveExpressions.Expression)">
            <summary>
            Return the static reference paths to memory.
            </summary>
            <remarks>
            Return all static paths to memory.  If there is a computed element index, then the path is terminated there,
            but you might get other paths from the computed part as well.
            </remarks>
            <param name="expression">Expression to get references from.</param>
            <returns>List of the static reference paths.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.ReferenceWalk(AdaptiveExpressions.Expression,System.Func{AdaptiveExpressions.Expression,System.Boolean})">
            <summary>
            Walking function for identifying static memory references in an expression.
            </summary>
            <param name="expression">Expression to analyze.</param>
            <param name="extension">If present, called to override lookup for things like template expansion.</param>
            <returns>Accessor path of expression which is a potential partial path and the full path found so far.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.PushDownNot(AdaptiveExpressions.Expression)">
            <summary>
            Rewrite the expression by pushing not down to the leaves.
            </summary>
            <remarks>
            Push down not to the leaves if possible.  For and/or/not this uses DeMorgan's law and rewrites comparisons.
            You can define your own behavior by setting <see cref="P:AdaptiveExpressions.ExpressionEvaluator.Negation"/> to the negated evaluator.
            </remarks>
            <param name="expression">Expression to rewrite.</param>
            <returns>Rewritten expression.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Extensions.DisjunctiveNormalForm(AdaptiveExpressions.Expression)">
            <summary>
            Rewrite expression into disjunctive normal form.
            </summary>
            <remarks>
            Rewrites to either a simple expression or a disjunction of conjunctions or simple expressions with not pushed down
            to leaves.
            </remarks>
            <param name="expression">Expression to rewrite.</param>
            <returns>Normalized expression.</returns>
        </member>
        <member name="T:AdaptiveExpressions.IComponentExpressionFunctions">
            <summary>
            Interface for adding custom functions to the expression engine.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.IComponentExpressionFunctions.GetExpressionEvaluators">
            <summary>
            Return collection of ExpressionEvaluators.
            </summary>
            <returns>enumeration of custom ExpressionEvaluators.</returns>
        </member>
        <member name="T:AdaptiveExpressions.IExpressionParser">
            <summary>
            Interface to parse a string into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.IExpressionParser.Parse(System.String)">
            <summary>
            Parse a string into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
            <param name="expression">Expression to parse.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="T:AdaptiveExpressions.LRUCache`2">
            <summary>
            A least-recently-used cache stored like a dictionary.
            </summary>
            <typeparam name="TKey">The type of the key to the cached item.</typeparam>
            <typeparam name="TValue">The type of the cached item.</typeparam>
        </member>
        <member name="F:AdaptiveExpressions.LRUCache`2.DefaultCapacity">
            <summary>
            Default maximum number of elements to cache.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.LRUCache`2"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.LRUCache`2"/> class.
            </summary>
            <param name="capacity">Maximum number of elements to cache.</param>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.TryGet(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with
            the specified key, if the key is found; otherwise, the default value for the 
            type of the <paramref name="value" /> parameter.</param>
            <returns>true if contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.LRUCache`2.Set(`0,`1)">
            <summary>
            Adds the specified key and value to the cache.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="T:AdaptiveExpressions.Memory.IMemory">
            <summary>
            Memory interface.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">memory path.</param>
            <param name="value">value to set.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path, it can be a simple identifier like "a", or
            a combined path like "a.b", "a.b[2]", "a.b[2].c", inside [] is guaranteed to be a int number or a string.
            </summary>
            <param name="path">memory path.</param>
            <param name="value">resolved value.</param>
            <returns> true if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.IMemory.Version">
            <summary>
            Version is used to identify whether the a particular memory instance has been updated or not.
            If version is not changed, the caller may choose to use the cached result instead of recomputing everything.
            </summary>
            <returns>A string indicates the version.</returns>
        </member>
        <member name="T:AdaptiveExpressions.Memory.SimpleObjectMemory">
            <summary>
            Simple implement of <see cref="T:AdaptiveExpressions.Memory.IMemory"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.Memory.SimpleObjectMemory"/> class.
            This wraps a simple object as IMemory.
            </summary>
            <param name="memory">The object to wrap.</param>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.Wrap(System.Object)">
            <summary>
            Transfer an common object to simple memory.
            </summary>
            <param name="obj">Common object.</param>
            <returns>Simple memory instance.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path.
            </summary>
            <param name="path">Given path.</param>
            <param name="value">Resolved value.</param>
            <returns>True if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.SimpleObjectMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">Memory path.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:AdaptiveExpressions.Memory.StackedMemory">
            <summary>
            Stack implements of <see cref="T:AdaptiveExpressions.Memory.IMemory"/>.
            Memory variables have a hierarchical relationship.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.TryGetValue(System.String,System.Object@)">
            <summary>
            Try get value from a given path.
            </summary>
            <param name="path">Given path.</param>
            <param name="value">Resolved value.</param>
            <returns>True if the memory contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:AdaptiveExpressions.Memory.StackedMemory.SetValue(System.String,System.Object)">
            <summary>
            Set value to a given path.
            </summary>
            <param name="path">Memory path.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:AdaptiveExpressions.ExpressionEngine">
            <summary>
            Parser to turn strings into an <see cref="T:AdaptiveExpressions.Expression"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEngine.#ctor(AdaptiveExpressions.EvaluatorLookup)">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.ExpressionEngine"/> class.
            Constructor.
            </summary>
            <param name="lookup">Delegate to lookup evaluation information from type string.</param>
        </member>
        <member name="P:AdaptiveExpressions.ExpressionEngine.EvaluatorLookup">
            <summary>
            Gets the elegate to lookup function information from the type.
            </summary>
            <value>
            The elegate to lookup function information from the type.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.ExpressionEngine.Parse(System.String)">
            <summary>
            Parse the input into an expression.
            </summary>
            <param name="expression">Expression to parse.</param>
            <returns>Expression tree.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ParserErrorListener">
            <summary>
            Expression parser error listener.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TimeZoneConverter">
            <summary>
            Time zone converter.
            (1) From Windows (.NET) timezone to iana timezone.
            (2) From iana timezone to windows (.NET) timezone.
            windows ref: https://support.microsoft.com/en-us/help/22803/daylight-saving-time.
            iana ref: https://www.iana.org/time-zones.
            See database dictionary in file WindowsIanaMapping.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TimeZoneConverter.IanaToWindows(System.String)">
            <summary>
            convert IANA timezone format to windows timezone format.
            </summary>
            <param name="ianaTimeZoneId">IANA timezone format.</param>
            <returns>windows timezone format.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TimeZoneConverter.WindowsToIana(System.String)">
            <summary>
            Convert windows timezone to iana timezone.
            </summary>
            <param name="windowsTimeZoneId">Windows timezone format.</param>
            <returns>Iana timezone format.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Extensions">
            <summary>
            Extension method to swap between <see cref="T:AdaptiveExpressions.TriggerTrees.RelationshipType"/> "Generalizes" and "Specializes".
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.IOptimizer">
            <summary>
            Optimize a clause by rewriting it.
            </summary>
            <remarks>
            If returned clause is null, then the expression will always be false.
            This is to allow things like combining simple comparisons into a range predicate.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.IOptimizer.Optimize(AdaptiveExpressions.TriggerTrees.Clause)">
            <summary>
            Optionally rewrite a clause.
            </summary>
            <param name="clause">Original clause.</param>
            <returns>Optimized clause.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.IPredicateComparer">
            <summary>
            Compare two predicates to identify the relationship between them.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.IPredicateComparer.Predicate">
            <summary>
            Gets name of predicate.
            </summary>
            <value>
            Name of predicate.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.IPredicateComparer.Relationship(AdaptiveExpressions.Expression,AdaptiveExpressions.Expression)">
            <summary>
            Identify the relationship between two predicates.
            </summary>
            <param name="predicate">First predicate.</param>
            <param name="other">Second predicate.</param>
            <returns>Relationship between predicates.</returns>
            <remarks>
            This is useful for doing things like identifying that Range("size", 1, 5) is more specialized than Range("size", 1, 10).
            </remarks>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Node">
            <summary>
            Node in a trigger tree.
            </summary>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Triggers">
            <summary>
            Gets all of the most specific triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node.
            </summary>
            <value>
            All of the most specific triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.AllTriggers">
            <summary>
            Gets all triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node. 
            </summary>
            <remarks>
            Triggers only contain the most specific trigger, so if this node 
            is Pred(A) and there was a rule R1: Pred(A) -> A1 and R2: Pred(A) v Pred(B) -> A2
            then the second trigger would be in AllTriggers, but not Triggers because it 
            is more general.
            </remarks>
            <value>
            All triggers that contain the <see cref="P:AdaptiveExpressions.TriggerTrees.Node.Clause"/> in this node. 
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Specializations">
            <summary>
            Gets specialized children of this node.
            </summary>
            <value>
            Specialized children of this node.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Clause">
            <summary>
            Gets the logical conjunction this node represents.
            </summary>
            <value>
            The logical conjunction this node represents.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Node.Tree">
            <summary>
            Gets the tree this node is found in.
            </summary>
            <value>
            The tree this node is found in.
            </value>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.Relationship(AdaptiveExpressions.TriggerTrees.Node)">
            <summary>
            Identify the relationship between two nodes.
            </summary>
            <param name="other">Node to compare against.</param>
            <returns>Relationship between this node and the other.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Node.Matches(System.Object)">
            <summary>
            Return the most specific matches below this node.
            </summary>
            <param name="state">Frame to evaluate against.</param>
            <returns>List of the most specific matches found.</returns>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.QuantifierType">
            <summary>
            Type of quantifier for expanding trigger expressions.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.QuantifierType.All">
            <summary>
            Within a clause, duplicate any predicate with variable for each possible binding.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.QuantifierType.Any">
            <summary>
            Create a new clause for each possible binding of variable.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Quantifier">
            <summary>
            Quantifier for allowing runtime expansion of expressions.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Quantifier.#ctor(System.String,AdaptiveExpressions.TriggerTrees.QuantifierType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.Quantifier"/> class.
            </summary>
            <param name="variable">Name of variable to replace.</param>
            <param name="type">Type of quantifier.</param>
            <param name="bindings">Possible bindings for variable.</param>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Variable">
            <summary>
            Gets name of variable that will be replaced.
            </summary>
            <value>
            Name of variable that will be replaced.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Type">
            <summary>
            Gets type of quantifier.
            </summary>
            <value>
            Type of quantifier.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Quantifier.Bindings">
            <summary>
            Gets possible bindings for quantifier.
            </summary>
            <value>
            Possible bindings for quantifier.
            </value>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.RelationshipType">
            <summary>
            Relationship between trigger expressions.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Specializes">
            <summary>
            First argument specializes the second, i.e. applies to a subset of the states the second argument covers.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Equal">
            <summary>
            First and second argument are the same expression.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Generalizes">
            <summary>
            First argument generalizes the second, i.e. applies to a superset of the states the second argument covers.
            </summary>
        </member>
        <member name="F:AdaptiveExpressions.TriggerTrees.RelationshipType.Incomparable">
            <summary>
            Cannot tell how the first and second arguments relate.
            </summary>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.Trigger">
            <summary>
            A trigger is a combination of a trigger expression and the corresponding action.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.Trigger.#ctor(AdaptiveExpressions.TriggerTrees.TriggerTree,AdaptiveExpressions.Expression,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.Trigger"/> class.
            Construct a trigger expression.
            </summary>
            <param name="tree">Trigger tree that contains this trigger.</param>
            <param name="expression">Expression for when the trigger action is possible.</param>
            <param name="action">Action to take when a trigger matches.</param>
            <param name="quantifiers">Quantifiers to dynamically expand the expression.</param>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.OriginalExpression">
            <summary>
            Gets the original trigger expression.
            </summary>
            <value>
            Original trigger expression.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.Action">
            <summary>
            Gets action to take when trigger is true.
            </summary>
            <value>
            Action to take when trigger is true.
            </value>
        </member>
        <member name="P:AdaptiveExpressions.TriggerTrees.Trigger.Clauses">
            <summary>
            Gets list of expressions converted into Disjunctive Normal Form where ! is pushed to the leaves and 
            there is an implicit || between clauses and &amp;&amp; within a clause. 
            </summary>
            <value>
            List of expressions converted into Disjunctive Normal Form where ! is pushed to the leaves and 
            there is an implicit || between clauses and &amp;&amp; within a clause. 
            </value>
        </member>
        <member name="T:AdaptiveExpressions.TriggerTrees.TriggerTree">
            <summary>
            A trigger tree organizes evaluators according to generalization/specialization in order to make it easier to use rules.
            </summary>
            <remarks>
            A trigger expression generates true if the expression evaluated on a frame is true.
            The expression itself consists of arbitrary boolean functions ("predicates") combined with &amp;&amp; || !.
            Most predicates are expressed over the frame passed in, but they can be anything--there are even ways of optimizing or comparing them.
            By organizing evaluators into a tree (technically a DAG) it becomes easier to use rules by reducing the coupling between rules.
            For example if a rule applies if some predicate A is true, then another rule that applies if A &amp;&amp; B are true is
            more specialized.  If the second expression is true, then because we know of the relationship we can ignore the first
            rule--even though its expression is true.  Without this kind of capability in order to add the second rule, you would
            have to change the first to become A &amp;&amp; !B.
            </remarks>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdaptiveExpressions.TriggerTrees.TriggerTree"/> class.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.AddTrigger(System.String,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Add a trigger expression to the tree.
            </summary>
            <param name="expression">Trigger to add.</param>
            <param name="action">Action when triggered.</param>
            <param name="quantifiers">Quantifiers to use when expanding expressions.</param>
            <returns>New trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.AddTrigger(AdaptiveExpressions.Expression,System.Object,AdaptiveExpressions.TriggerTrees.Quantifier[])">
            <summary>
            Add a trigger expression to the tree.
            </summary>
            <param name="expression">Trigger to add.</param>
            <param name="action">Action when triggered.</param>
            <param name="quantifiers">Quantifiers to use when expanding expressions.</param>
            <returns>New trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.RemoveTrigger(AdaptiveExpressions.TriggerTrees.Trigger)">
            <summary>
            Remove trigger from tree.
            </summary>
            <param name="trigger">Trigger to remove.</param>
            <returns>True if removed trigger.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.TreeToString(System.Int32)">
            <summary>
            Generate a string describing the tree.
            </summary>
            <param name="indent">Current indent level.</param>
            <returns>string describing the tree.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.Matches(System.Object)">
            <summary>
            Return the possible matches given the current state.
            </summary>
            <param name="state">State to evaluate against.</param>
            <returns>Enumeration of possible matches.</returns>
        </member>
        <member name="M:AdaptiveExpressions.TriggerTrees.TriggerTree.VerifyTree">
            <summary>
            Verify the tree meets specialization/generalization invariants. 
            </summary>
            <returns>Bad node if found.</returns>
        </member>
        <member name="T:AdaptiveExpressions.ICommonRegexListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:AdaptiveExpressions.CommonRegexParser"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.EnterLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexListener.ExitLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:AdaptiveExpressions.CommonRegexBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:AdaptiveExpressions.ICommonRegexListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:AdaptiveExpressions.ICommonRegexVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:AdaptiveExpressions.CommonRegexParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.ICommonRegexVisitor`1.VisitLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:AdaptiveExpressions.CommonRegexBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:AdaptiveExpressions.ICommonRegexVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitParse(AdaptiveExpressions.CommonRegexParser.ParseContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.parse"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitAlternation(AdaptiveExpressions.CommonRegexParser.AlternationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alternation"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitExpr(AdaptiveExpressions.CommonRegexParser.ExprContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.expr"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitElement(AdaptiveExpressions.CommonRegexParser.ElementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.element"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitQuantifier(AdaptiveExpressions.CommonRegexParser.QuantifierContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitQuantifier_type(AdaptiveExpressions.CommonRegexParser.Quantifier_typeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.quantifier_type"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitCharacter_class(AdaptiveExpressions.CommonRegexParser.Character_classContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.character_class"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitCapture(AdaptiveExpressions.CommonRegexParser.CaptureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.capture"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitNon_capture(AdaptiveExpressions.CommonRegexParser.Non_captureContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_capture"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitOption(AdaptiveExpressions.CommonRegexParser.OptionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitOption_flag(AdaptiveExpressions.CommonRegexParser.Option_flagContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.option_flag"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitAtom(AdaptiveExpressions.CommonRegexParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitCc_atom(AdaptiveExpressions.CommonRegexParser.Cc_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitShared_atom(AdaptiveExpressions.CommonRegexParser.Shared_atomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitLiteral(AdaptiveExpressions.CommonRegexParser.LiteralContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitCc_literal(AdaptiveExpressions.CommonRegexParser.Cc_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.cc_literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitShared_literal(AdaptiveExpressions.CommonRegexParser.Shared_literalContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.shared_literal"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitNumber(AdaptiveExpressions.CommonRegexParser.NumberContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.number"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitOctal_char(AdaptiveExpressions.CommonRegexParser.Octal_charContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_char"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitOctal_digit(AdaptiveExpressions.CommonRegexParser.Octal_digitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.octal_digit"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitDigits(AdaptiveExpressions.CommonRegexParser.DigitsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digits"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitDigit(AdaptiveExpressions.CommonRegexParser.DigitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.digit"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitName(AdaptiveExpressions.CommonRegexParser.NameContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.name"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitAlpha_nums(AdaptiveExpressions.CommonRegexParser.Alpha_numsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.alpha_nums"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitNon_close_parens(AdaptiveExpressions.CommonRegexParser.Non_close_parensContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_parens"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitNon_close_paren(AdaptiveExpressions.CommonRegexParser.Non_close_parenContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.non_close_paren"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.CommonRegexBaseVisitor`1.VisitLetter(AdaptiveExpressions.CommonRegexParser.LetterContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.CommonRegexParser.letter"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:AdaptiveExpressions.parser.IExpressionParserListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:AdaptiveExpressions.parser.ExpressionParser"/>.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Enter a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Exit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Enter a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Exit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.EnterArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserListener.ExitArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:AdaptiveExpressions.parser.ExpressionParserBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:AdaptiveExpressions.parser.IExpressionParserListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Enter a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Exit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Enter a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Exit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Enter a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Exit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Enter a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Exit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:AdaptiveExpressions.parser.IExpressionParserVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:AdaptiveExpressions.parser.ExpressionParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Visit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Visit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.IExpressionParserVisitor`1.VisitArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:AdaptiveExpressions.parser.IExpressionParserVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitUnaryOpExp(AdaptiveExpressions.parser.ExpressionParser.UnaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>unaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitBinaryOpExp(AdaptiveExpressions.parser.ExpressionParser.BinaryOpExpContext)">
            <summary>
            Visit a parse tree produced by the <c>binaryOpExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitPrimaryExp(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpContext)">
            <summary>
            Visit a parse tree produced by the <c>primaryExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitParenthesisExp(AdaptiveExpressions.parser.ExpressionParser.ParenthesisExpContext)">
            <summary>
            Visit a parse tree produced by the <c>parenthesisExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitConstantAtom(AdaptiveExpressions.parser.ExpressionParser.ConstantAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>constantAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitNumericAtom(AdaptiveExpressions.parser.ExpressionParser.NumericAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>numericAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitStringAtom(AdaptiveExpressions.parser.ExpressionParser.StringAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitIdAtom(AdaptiveExpressions.parser.ExpressionParser.IdAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>idAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitStringInterpolationAtom(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>stringInterpolationAtom</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitMemberAccessExp(AdaptiveExpressions.parser.ExpressionParser.MemberAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>memberAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitFuncInvokeExp(AdaptiveExpressions.parser.ExpressionParser.FuncInvokeExpContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitIndexAccessExp(AdaptiveExpressions.parser.ExpressionParser.IndexAccessExpContext)">
            <summary>
            Visit a parse tree produced by the <c>indexAccessExp</c>
            labeled alternative in <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitFile(AdaptiveExpressions.parser.ExpressionParser.FileContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.file"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitExpression(AdaptiveExpressions.parser.ExpressionParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitPrimaryExpression(AdaptiveExpressions.parser.ExpressionParser.PrimaryExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.primaryExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitStringInterpolation(AdaptiveExpressions.parser.ExpressionParser.StringInterpolationContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.stringInterpolation"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitTextContent(AdaptiveExpressions.parser.ExpressionParser.TextContentContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.textContent"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:AdaptiveExpressions.parser.ExpressionParserBaseVisitor`1.VisitArgsList(AdaptiveExpressions.parser.ExpressionParser.ArgsListContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:AdaptiveExpressions.parser.ExpressionParser.argsList"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
